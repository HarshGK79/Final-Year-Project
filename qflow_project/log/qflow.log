Starting new log file Thu Apr 17 02:42:53 2025

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project ALU
Running yosys for verilog parsing and synthesis
yosys  -s ALU.ys

/----------------------------------------------------------------------------\
|                                                                            |
|  yosys -- Yosys Open SYnthesis Suite                                       |
|                                                                            |
|  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
|                                                                            |
|  Permission to use, copy, modify, and/or distribute this software for any  |
|  purpose with or without fee is hereby granted, provided that the above    |
|  copyright notice and this permission notice appear in all copies.         |
|                                                                            |
|  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
|  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
|  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
|  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
|  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
|  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
|  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
|                                                                            |
\----------------------------------------------------------------------------/

Yosys 0.7 (git sha1 61f6811, gcc 5.4.0-6ubuntu1~16.04.4 -O2 -fstack-protector-strong -fPIC -Os)


-- Executing script file `ALU.ys' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `/home/harshgk/vsdflow/source/alu_design.v' to AST representation.
Generating RTLIL representation for module `\ALU'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \ALU

3.1.2. Analyzing design hierarchy..
Top module:  \ALU
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ALU.$proc$/home/harshgk/vsdflow/source/alu_design.v:10$1'.
1/2: $1\result[7:0]
2/2: $0\result[7:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\ALU.\result' from process `\ALU.$proc$/home/harshgk/vsdflow/source/alu_design.v:10$1'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\ALU.$proc$/home/harshgk/vsdflow/source/alu_design.v:10$1'.
Removing empty process `ALU.$proc$/home/harshgk/vsdflow/source/alu_design.v:10$1'.
Cleaned up 1 empty switch.

3.3. Executing OPT_EXPR pass (perform const folding).
Replacing $shl cell `$shl$/home/harshgk/vsdflow/source/alu_design.v:18$8' (B=1, SHR=-1) in module `ALU' with fixed wiring: { \A [6:0] 1'0 }
Replacing $shr cell `$shr$/home/harshgk/vsdflow/source/alu_design.v:19$9' (B=1, SHR=1) in module `ALU' with fixed wiring: { 1'0 \A [7:1] }
Replacing $eq cell `$eq$/home/harshgk/vsdflow/source/alu_design.v:26$12' in module `ALU' with $logic_not.
Replacing $eq cell `$procmux$33_CMP0' in module `ALU' with $logic_not.
Replacing $eq cell `$eq$/home/harshgk/vsdflow/source/alu_design.v:33$22' in module `ALU' with $logic_not.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..

3.5. Executing CHECK pass (checking for obvious problems).
checking module ALU..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Cell `$ne$/home/harshgk/vsdflow/source/alu_design.v:27$18' is identical to cell `$ne$/home/harshgk/vsdflow/source/alu_design.v:26$14'.
Redirecting output \Y: $ne$/home/harshgk/vsdflow/source/alu_design.v:27$18_Y = $ne$/home/harshgk/vsdflow/source/alu_design.v:26$14_Y
Removing $ne cell `$ne$/home/harshgk/vsdflow/source/alu_design.v:27$18' from module `\ALU'.
Cell `$procmux$32_CMP0' is identical to cell `$eq$/home/harshgk/vsdflow/source/alu_design.v:27$16'.
Redirecting output \Y: $procmux$32_CMP = $eq$/home/harshgk/vsdflow/source/alu_design.v:27$16_Y
Removing $eq cell `$procmux$32_CMP0' from module `\ALU'.
Cell `$procmux$33_CMP0' is identical to cell `$eq$/home/harshgk/vsdflow/source/alu_design.v:26$12'.
Redirecting output \Y: $procmux$33_CMP = $eq$/home/harshgk/vsdflow/source/alu_design.v:26$12_Y
Removing $logic_not cell `$procmux$33_CMP0' from module `\ALU'.
Removed a total of 3 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Root of a mux tree: $procmux$24 (pure)
Root of a mux tree: $ternary$/home/harshgk/vsdflow/source/alu_design.v:27$21 (pure)
Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \ALU.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..

3.6.8. Executing OPT_EXPR pass (perform const folding).

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 7 bits (of 8) from mux cell ALU.$ternary$/home/harshgk/vsdflow/source/alu_design.v:20$11 ($mux).
Removed top 3 bits (of 4) from port B of cell ALU.$eq$/home/harshgk/vsdflow/source/alu_design.v:27$16 ($eq).
Removed top 1 bits (of 4) from port B of cell ALU.$procmux$26_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell ALU.$procmux$27_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell ALU.$procmux$28_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell ALU.$procmux$29_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell ALU.$procmux$30_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell ALU.$procmux$31_CMP0 ($eq).
Removed top 7 bits (of 8) from wire ALU.$ternary$/home/harshgk/vsdflow/source/alu_design.v:20$11_Y.

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ALU:
creating $macc model for $add$/home/harshgk/vsdflow/source/alu_design.v:12$2 ($add).
creating $macc model for $sub$/home/harshgk/vsdflow/source/alu_design.v:13$3 ($sub).
creating $alu model for $macc $sub$/home/harshgk/vsdflow/source/alu_design.v:13$3.
creating $alu model for $macc $add$/home/harshgk/vsdflow/source/alu_design.v:12$2.
creating $alu model for $lt$/home/harshgk/vsdflow/source/alu_design.v:20$10 ($lt): merged with $sub$/home/harshgk/vsdflow/source/alu_design.v:13$3.
creating $alu cell for $add$/home/harshgk/vsdflow/source/alu_design.v:12$2: $auto$alumacc.cc:470:replace_alu$35
creating $alu cell for $sub$/home/harshgk/vsdflow/source/alu_design.v:13$3, $lt$/home/harshgk/vsdflow/source/alu_design.v:20$10: $auto$alumacc.cc:470:replace_alu$38
created 2 $alu and 0 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing away select inverter for $mux cell `$ternary$/home/harshgk/vsdflow/source/alu_design.v:20$11' in module `ALU'.

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Root of a mux tree: $procmux$24 (pure)
Root of a mux tree: $ternary$/home/harshgk/vsdflow/source/alu_design.v:27$21 (pure)
Analyzing evaluation results.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \ALU.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
removing unused `$not' cell `$auto$alumacc.cc:78:get_cf$41'.

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Rerunning OPT passes. (Maybe there is more to do..)

3.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Root of a mux tree: $procmux$24 (pure)
Root of a mux tree: $ternary$/home/harshgk/vsdflow/source/alu_design.v:27$21 (pure)
Analyzing evaluation results.
Removed 0 multiplexer ports.

3.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \ALU.
Performed a total of 0 changes.

3.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Removed a total of 0 cells.

3.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..

3.10.15. Executing OPT_EXPR pass (perform const folding).

3.10.16. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Replacing $mux cell `$ternary$/home/harshgk/vsdflow/source/alu_design.v:20$11' in module `ALU' with inverter.
Replacing $mux cell `$ternary$/home/harshgk/vsdflow/source/alu_design.v:27$20' in module `ALU' with and-gate.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Removed a total of 0 cells.

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Root of a mux tree: $procmux$24 (pure)
Root of a mux tree: $ternary$/home/harshgk/vsdflow/source/alu_design.v:27$21 (pure)
Analyzing evaluation results.
Removed 0 multiplexer ports.

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \ALU.
Performed a total of 0 changes.

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Removed a total of 0 cells.

3.17.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..

3.17.8. Executing OPT_EXPR pass (perform const folding).

3.17.9. Finished OPT passes. (There is nothing left to do.)

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping ALU.$and$/home/harshgk/vsdflow/source/alu_design.v:14$4 ($and) with simplemap.
Mapping ALU.$or$/home/harshgk/vsdflow/source/alu_design.v:15$5 ($or) with simplemap.
Mapping ALU.$xor$/home/harshgk/vsdflow/source/alu_design.v:16$6 ($xor) with simplemap.
Mapping ALU.$not$/home/harshgk/vsdflow/source/alu_design.v:17$7 ($not) with simplemap.

3.18.2. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 8
Parameter \B_WIDTH = 8
Parameter \Y_WIDTH = 8
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8'.

3.18.3. Continuing TECHMAP pass.
Mapping ALU.$auto$alumacc.cc:470:replace_alu$38 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8.
Mapping ALU.$ternary$/home/harshgk/vsdflow/source/alu_design.v:20$11 ($not) with simplemap.
Mapping ALU.$eq$/home/harshgk/vsdflow/source/alu_design.v:26$12 ($logic_not) with simplemap.
Mapping ALU.$eq$/home/harshgk/vsdflow/source/alu_design.v:26$13 ($eq) with simplemap.
Mapping ALU.$ne$/home/harshgk/vsdflow/source/alu_design.v:26$14 ($ne) with simplemap.
Mapping ALU.$logic_and$/home/harshgk/vsdflow/source/alu_design.v:26$15 ($logic_and) with simplemap.
Mapping ALU.$eq$/home/harshgk/vsdflow/source/alu_design.v:27$16 ($eq) with simplemap.
Mapping ALU.$ne$/home/harshgk/vsdflow/source/alu_design.v:27$17 ($ne) with simplemap.
Mapping ALU.$logic_and$/home/harshgk/vsdflow/source/alu_design.v:27$19 ($logic_and) with simplemap.
Mapping ALU.$ternary$/home/harshgk/vsdflow/source/alu_design.v:27$20 ($and) with simplemap.
Mapping ALU.$ternary$/home/harshgk/vsdflow/source/alu_design.v:27$21 ($mux) with simplemap.
Mapping ALU.$eq$/home/harshgk/vsdflow/source/alu_design.v:33$22 ($logic_not) with simplemap.
Mapping ALU.$procmux$25_CMP0 ($eq) with simplemap.
Mapping ALU.$auto$alumacc.cc:470:replace_alu$35 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8.

3.18.4. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 8
Parameter \S_WIDTH = 9
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=8\S_WIDTH=9'.

3.18.5. Continuing TECHMAP pass.
Mapping ALU.$procmux$24 using $paramod\_90_pmux\WIDTH=8\S_WIDTH=9.
Mapping ALU.$procmux$26_CMP0 ($eq) with simplemap.
Mapping ALU.$procmux$27_CMP0 ($eq) with simplemap.
Mapping ALU.$procmux$28_CMP0 ($eq) with simplemap.
Mapping ALU.$procmux$29_CMP0 ($eq) with simplemap.
Mapping ALU.$procmux$30_CMP0 ($eq) with simplemap.
Mapping ALU.$procmux$31_CMP0 ($eq) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.$xor$<techmap.v>:262$122 ($xor) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.$xor$<techmap.v>:263$123 ($xor) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.$and$<techmap.v>:260$121 ($and) with simplemap.

3.18.6. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_lcu'.
Parameter \WIDTH = 8
Generating RTLIL representation for module `$paramod\_90_lcu\WIDTH=8'.

3.18.7. Executing PROC pass (convert processes to netlists).

3.18.7.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.18.7.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.18.7.3. Executing PROC_INIT pass (extract init attributes).

3.18.7.4. Executing PROC_ARST pass (detect async resets in processes).

3.18.7.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$342'.
1/16: $0\p[7:0] [6]
2/16: $0\g[7:0] [6]
3/16: $0\p[7:0] [4]
4/16: $0\g[7:0] [4]
5/16: $0\p[7:0] [2]
6/16: $0\g[7:0] [2]
7/16: $0\p[7:0] [5]
8/16: $0\g[7:0] [5]
9/16: $0\p[7:0] [7]
10/16: $0\g[7:0] [7]
11/16: $0\p[7:0] [3]
12/16: $0\g[7:0] [3]
13/16: $0\p[7:0] [1]
14/16: $0\g[7:0] [1]
15/16: $0\g[7:0] [0]
16/16: $0\p[7:0] [0]

3.18.7.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\_90_lcu\WIDTH=8.\p' from process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$342'.
No latch inferred for signal `$paramod\_90_lcu\WIDTH=8.\g' from process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$342'.

3.18.7.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.18.7.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$342'.
Cleaned up 0 empty switches.

3.18.8. Executing OPT pass (performing simple optimizations).

3.18.8.1. Executing OPT_EXPR pass (perform const folding).

3.18.8.2. Executing OPT_MERGE pass (detect identical cells).

LEF Read, Line 191: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 192: NOTE:  Old format VIARULE ignored.
Qflow project setup
LEF Read, Line 196: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 197: NOTE:  Old format VIARULE ignored.

LEF Read, Line 207: NOTE:  Old format VIARULE ignored.
Technology set to osu018 from existing qflow_vars.sh file
LEF Read, Line 208: NOTE:  Old format VIARULE ignored.
Regenerating files for existing project ALU
LEF Read, Line 212: NOTE:  Old format VIARULE ignored.
Qrouter detail maze router version 1.4.59.T
LEF Read, Line 213: NOTE:  Old format VIARULE ignored.
Reading LEF data from file /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef.
LEF Read, Line 223: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site core (ignored)
LEF Read, Line 224: NOTE:  Old format VIARULE ignored.
LEF read: Processed 2941 lines.
LEF Read, Line 228: NOTE:  Old format VIARULE ignored.
LEF Read: encountered 0 errors and 20 warnings total.
LEF Read, Line 229: NOTE:  Old format VIARULE ignored.
Vertical route layer at non-minimum pitch 1.6.  Using smaller pitch 0.8, will route on 1-of-2 tracks for layer metal6.
LEF Read, Line 239: NOTE:  Old format VIARULE ignored.
Running blif2cel to generate input files for graywolf
LEF Read, Line 240: NOTE:  Old format VIARULE ignored.
blif2cel.tcl --blif /home/harshgk/vsdflow/synthesis/ALU.blif  --lef  /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef --cel /home/harshgk/vsdflow/layout/ALU.cel
LEF Read, Line 244: NOTE:  Old format VIARULE ignored.
No ALU.cel1 file found for project. . . no partial blockages to apply to layout.
LEF Read, Line 245: NOTE:  Old format VIARULE ignored.
No ALU.cel2 file found for project. . . continuing without pin placement hints
LEF Read, Line 255: NOTE:  Old format VIARULE ignored.
Running GrayWolf placement
LEF Read, Line 256: NOTE:  Old format VIARULE ignored.
graywolf  ALU
LEF Read, Line 260: NOTE:  Old format VIARULE ignored.
LEF Read, Line 261: NOTE:  Old format VIARULE ignored.
Running getfillcell to determine cell to use for fill.
getfillcell.tcl ALU  /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef FILL
Using cell FILL for fill
Running place2def to translate graywolf output to DEF format.
place2def.tcl ALU FILL
Running addspacers to generate power stripes and align cell right edge
addspacers.tcl  -stripe 2.0 50.0 PG ALU  /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef FILL
Running arrangepins to adjust pin positions for optimal routing.
arrangepins.tcl  ALU
Reading info file ALU.info. . .
Reading DEF file ALU.def. . .
Recalculating pin positions
Writing DEF file ALU_mod.def. . .
Done with arrangepins.tcl
blifanno.tcl /home/harshgk/vsdflow/synthesis/ALU.blif ALU.def /home/harshgk/vsdflow/synthesis/ALU_anno.blif
Generating RTL verilog and SPICE netlist file in directory
/home/harshgk/vsdflow/synthesis
Files:
Verilog: /home/harshgk/vsdflow/synthesis/ALU.rtl.v
Verilog: /home/harshgk/vsdflow/synthesis/ALU.rtlnopwr.v
Verilog: /home/harshgk/vsdflow/synthesis/ALU.rtlbb.v


--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project ALU
Running qrouter 1.4.59.T
qrouter -noc  -s ALU.cfg
*** Running stage1 routing with defaults
Nets remaining: 200
Nets remaining: 100
Nets remaining: 90
Nets remaining: 80
Nets remaining: 70
Nets remaining: 60
Nets remaining: 50
Nets remaining: 40
Nets remaining: 30
Nets remaining: 20
Nets remaining: 10
Nets remaining: 9
Nets remaining: 8
Nets remaining: 7
Nets remaining: 6
Nets remaining: 5
Nets remaining: 4
Progress: Stage 1 total routes completed: 608


--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project ALU
Running magic 8.3.50
magic -dnull -noconsole  migrate_ALU.tcl

Magic 8.3 revision 50 - Compiled on Thu Mar 27 03:47:14 PDT 2025.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.10(p): scaleFactor=10, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Loading "migrate_ALU.tcl" from command line.
Root cell box:
width x height  (   llx,  lly  ), (   urx,  ury  )

microns:    0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
lambda:        0 x 0       (     0,  0    ), (     0,  0    )
Reading LEF data from file /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef.
This action cannot be undone.
LEF read, Line 16 (Message): Unknown keyword "OBS" in LEF file; ignoring.
LEF read, Line 17 (Message): Unknown keyword "PIN" in LEF file; ignoring.
LEF read: Processed 2941 lines.
Reading DEF data from file ALU.def.
This action cannot be undone.
Processed 5 vias total.
Processed 304 subcell instances total.
Processed 33 pins total.
Processed 280 nets total.
DEF read, Line 3865 (Warning): Number of nets read (51) does not match the number declared (53).
DEF read: Processed 3866 lines.
DEF Read: encountered 1 warning total.
Generating LEF output ALU.lef for cell ALU:
Diagnostic:  Write LEF header for cell ALU
Diagnostic:  Writing LEF output for cell ALU
Diagnostic:  Scale value is 0.100000
Extracting INVX4 into INVX4.ext:
Completed 100%
Extracting INVX1 into INVX1.ext:
Completed 100%
Extracting INVX2 into INVX2.ext:
Completed 100%
Extracting BUFX2 into BUFX2.ext:
Completed 100%
Extracting FILL into FILL.ext:
Completed 100%
Extracting OAI22X1 into OAI22X1.ext:
Completed 100%
Extracting NOR2X1 into NOR2X1.ext:
Completed 100%
Extracting AOI21X1 into AOI21X1.ext:
Completed 100%
Extracting AOI22X1 into AOI22X1.ext:
Completed 100%
Extracting NAND3X1 into NAND3X1.ext:
Completed 100%
Extracting NAND2X1 into NAND2X1.ext:
Completed 100%
Extracting OR2X2 into OR2X2.ext:
Completed 100%
Extracting OAI21X1 into OAI21X1.ext:
Completed 100%
Extracting NOR3X1 into NOR3X1.ext:
Completed 100%
Extracting AND2X2 into AND2X2.ext:
Completed 100%
Extracting XOR2X1 into XOR2X1.ext:
Completed 100%
Extracting ALU into ALU.ext:
Completed 5%
Completed 10%
Completed 15%
Completed 20%
Completed 25%
Completed 30%
Completed 35%
Completed 40%
Completed 45%
Completed 51%
Completed 56%


--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project ALU
Running magic 8.3.50
magic -dnull -noconsole  /home/harshgk/vsdflow/layout/run_drc_ALU.tcl


--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project ALU
Running magic 8.3.50
magic -dnull -noconsole  /home/harshgk/vsdflow/layout/generate_gds_ALU.tcl

Magic 8.3 revision 50 - Compiled on Thu Mar 27 03:47:14 PDT 2025.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.10(p): scaleFactor=10, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).

