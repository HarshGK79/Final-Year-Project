Qflow synthesis logfile created on Thu Apr 17 02:43:29 PDT 2025
Running yosys for verilog parsing and synthesis
yosys  -s ALU.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7 (git sha1 61f6811, gcc 5.4.0-6ubuntu1~16.04.4 -O2 -fstack-protector-strong -fPIC -Os)


-- Executing script file `ALU.ys' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `/home/harshgk/vsdflow/source/alu_design.v' to AST representation.
Generating RTLIL representation for module `\ALU'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \ALU

3.1.2. Analyzing design hierarchy..
Top module:  \ALU
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ALU.$proc$/home/harshgk/vsdflow/source/alu_design.v:10$1'.
     1/2: $1\result[7:0]
     2/2: $0\result[7:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\ALU.\result' from process `\ALU.$proc$/home/harshgk/vsdflow/source/alu_design.v:10$1'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\ALU.$proc$/home/harshgk/vsdflow/source/alu_design.v:10$1'.
Removing empty process `ALU.$proc$/home/harshgk/vsdflow/source/alu_design.v:10$1'.
Cleaned up 1 empty switch.

3.3. Executing OPT_EXPR pass (perform const folding).
Replacing $shl cell `$shl$/home/harshgk/vsdflow/source/alu_design.v:18$8' (B=1, SHR=-1) in module `ALU' with fixed wiring: { \A [6:0] 1'0 }
Replacing $shr cell `$shr$/home/harshgk/vsdflow/source/alu_design.v:19$9' (B=1, SHR=1) in module `ALU' with fixed wiring: { 1'0 \A [7:1] }
Replacing $eq cell `$eq$/home/harshgk/vsdflow/source/alu_design.v:26$12' in module `ALU' with $logic_not.
Replacing $eq cell `$procmux$33_CMP0' in module `ALU' with $logic_not.
Replacing $eq cell `$eq$/home/harshgk/vsdflow/source/alu_design.v:33$22' in module `ALU' with $logic_not.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..

3.5. Executing CHECK pass (checking for obvious problems).
checking module ALU..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
  Cell `$ne$/home/harshgk/vsdflow/source/alu_design.v:27$18' is identical to cell `$ne$/home/harshgk/vsdflow/source/alu_design.v:26$14'.
    Redirecting output \Y: $ne$/home/harshgk/vsdflow/source/alu_design.v:27$18_Y = $ne$/home/harshgk/vsdflow/source/alu_design.v:26$14_Y
    Removing $ne cell `$ne$/home/harshgk/vsdflow/source/alu_design.v:27$18' from module `\ALU'.
  Cell `$procmux$32_CMP0' is identical to cell `$eq$/home/harshgk/vsdflow/source/alu_design.v:27$16'.
    Redirecting output \Y: $procmux$32_CMP = $eq$/home/harshgk/vsdflow/source/alu_design.v:27$16_Y
    Removing $eq cell `$procmux$32_CMP0' from module `\ALU'.
  Cell `$procmux$33_CMP0' is identical to cell `$eq$/home/harshgk/vsdflow/source/alu_design.v:26$12'.
    Redirecting output \Y: $procmux$33_CMP = $eq$/home/harshgk/vsdflow/source/alu_design.v:26$12_Y
    Removing $logic_not cell `$procmux$33_CMP0' from module `\ALU'.
Removed a total of 3 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$24 (pure)
    Root of a mux tree: $ternary$/home/harshgk/vsdflow/source/alu_design.v:27$21 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..

3.6.8. Executing OPT_EXPR pass (perform const folding).

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 7 bits (of 8) from mux cell ALU.$ternary$/home/harshgk/vsdflow/source/alu_design.v:20$11 ($mux).
Removed top 3 bits (of 4) from port B of cell ALU.$eq$/home/harshgk/vsdflow/source/alu_design.v:27$16 ($eq).
Removed top 1 bits (of 4) from port B of cell ALU.$procmux$26_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell ALU.$procmux$27_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell ALU.$procmux$28_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell ALU.$procmux$29_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell ALU.$procmux$30_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell ALU.$procmux$31_CMP0 ($eq).
Removed top 7 bits (of 8) from wire ALU.$ternary$/home/harshgk/vsdflow/source/alu_design.v:20$11_Y.

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ALU:
  creating $macc model for $add$/home/harshgk/vsdflow/source/alu_design.v:12$2 ($add).
  creating $macc model for $sub$/home/harshgk/vsdflow/source/alu_design.v:13$3 ($sub).
  creating $alu model for $macc $sub$/home/harshgk/vsdflow/source/alu_design.v:13$3.
  creating $alu model for $macc $add$/home/harshgk/vsdflow/source/alu_design.v:12$2.
  creating $alu model for $lt$/home/harshgk/vsdflow/source/alu_design.v:20$10 ($lt): merged with $sub$/home/harshgk/vsdflow/source/alu_design.v:13$3.
  creating $alu cell for $add$/home/harshgk/vsdflow/source/alu_design.v:12$2: $auto$alumacc.cc:470:replace_alu$35
  creating $alu cell for $sub$/home/harshgk/vsdflow/source/alu_design.v:13$3, $lt$/home/harshgk/vsdflow/source/alu_design.v:20$10: $auto$alumacc.cc:470:replace_alu$38
  created 2 $alu and 0 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing away select inverter for $mux cell `$ternary$/home/harshgk/vsdflow/source/alu_design.v:20$11' in module `ALU'.

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$24 (pure)
    Root of a mux tree: $ternary$/home/harshgk/vsdflow/source/alu_design.v:27$21 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
  removing unused `$not' cell `$auto$alumacc.cc:78:get_cf$41'.

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Rerunning OPT passes. (Maybe there is more to do..)

3.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$24 (pure)
    Root of a mux tree: $ternary$/home/harshgk/vsdflow/source/alu_design.v:27$21 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU.
Performed a total of 0 changes.

3.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Removed a total of 0 cells.

3.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..

3.10.15. Executing OPT_EXPR pass (perform const folding).

3.10.16. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Replacing $mux cell `$ternary$/home/harshgk/vsdflow/source/alu_design.v:20$11' in module `ALU' with inverter.
Replacing $mux cell `$ternary$/home/harshgk/vsdflow/source/alu_design.v:27$20' in module `ALU' with and-gate.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Removed a total of 0 cells.

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$24 (pure)
    Root of a mux tree: $ternary$/home/harshgk/vsdflow/source/alu_design.v:27$21 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU.
Performed a total of 0 changes.

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Removed a total of 0 cells.

3.17.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..

3.17.8. Executing OPT_EXPR pass (perform const folding).

3.17.9. Finished OPT passes. (There is nothing left to do.)

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping ALU.$and$/home/harshgk/vsdflow/source/alu_design.v:14$4 ($and) with simplemap.
Mapping ALU.$or$/home/harshgk/vsdflow/source/alu_design.v:15$5 ($or) with simplemap.
Mapping ALU.$xor$/home/harshgk/vsdflow/source/alu_design.v:16$6 ($xor) with simplemap.
Mapping ALU.$not$/home/harshgk/vsdflow/source/alu_design.v:17$7 ($not) with simplemap.

3.18.2. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 8
Parameter \B_WIDTH = 8
Parameter \Y_WIDTH = 8
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8'.

3.18.3. Continuing TECHMAP pass.
Mapping ALU.$auto$alumacc.cc:470:replace_alu$38 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8.
Mapping ALU.$ternary$/home/harshgk/vsdflow/source/alu_design.v:20$11 ($not) with simplemap.
Mapping ALU.$eq$/home/harshgk/vsdflow/source/alu_design.v:26$12 ($logic_not) with simplemap.
Mapping ALU.$eq$/home/harshgk/vsdflow/source/alu_design.v:26$13 ($eq) with simplemap.
Mapping ALU.$ne$/home/harshgk/vsdflow/source/alu_design.v:26$14 ($ne) with simplemap.
Mapping ALU.$logic_and$/home/harshgk/vsdflow/source/alu_design.v:26$15 ($logic_and) with simplemap.
Mapping ALU.$eq$/home/harshgk/vsdflow/source/alu_design.v:27$16 ($eq) with simplemap.
Mapping ALU.$ne$/home/harshgk/vsdflow/source/alu_design.v:27$17 ($ne) with simplemap.
Mapping ALU.$logic_and$/home/harshgk/vsdflow/source/alu_design.v:27$19 ($logic_and) with simplemap.
Mapping ALU.$ternary$/home/harshgk/vsdflow/source/alu_design.v:27$20 ($and) with simplemap.
Mapping ALU.$ternary$/home/harshgk/vsdflow/source/alu_design.v:27$21 ($mux) with simplemap.
Mapping ALU.$eq$/home/harshgk/vsdflow/source/alu_design.v:33$22 ($logic_not) with simplemap.
Mapping ALU.$procmux$25_CMP0 ($eq) with simplemap.
Mapping ALU.$auto$alumacc.cc:470:replace_alu$35 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8.

3.18.4. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 8
Parameter \S_WIDTH = 9
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=8\S_WIDTH=9'.

3.18.5. Continuing TECHMAP pass.
Mapping ALU.$procmux$24 using $paramod\_90_pmux\WIDTH=8\S_WIDTH=9.
Mapping ALU.$procmux$26_CMP0 ($eq) with simplemap.
Mapping ALU.$procmux$27_CMP0 ($eq) with simplemap.
Mapping ALU.$procmux$28_CMP0 ($eq) with simplemap.
Mapping ALU.$procmux$29_CMP0 ($eq) with simplemap.
Mapping ALU.$procmux$30_CMP0 ($eq) with simplemap.
Mapping ALU.$procmux$31_CMP0 ($eq) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.$xor$<techmap.v>:262$122 ($xor) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.$xor$<techmap.v>:263$123 ($xor) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.$and$<techmap.v>:260$121 ($and) with simplemap.

3.18.6. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_lcu'.
Parameter \WIDTH = 8
Generating RTLIL representation for module `$paramod\_90_lcu\WIDTH=8'.

3.18.7. Executing PROC pass (convert processes to netlists).

3.18.7.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.18.7.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.18.7.3. Executing PROC_INIT pass (extract init attributes).

3.18.7.4. Executing PROC_ARST pass (detect async resets in processes).

3.18.7.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$342'.
     1/16: $0\p[7:0] [6]
     2/16: $0\g[7:0] [6]
     3/16: $0\p[7:0] [4]
     4/16: $0\g[7:0] [4]
     5/16: $0\p[7:0] [2]
     6/16: $0\g[7:0] [2]
     7/16: $0\p[7:0] [5]
     8/16: $0\g[7:0] [5]
     9/16: $0\p[7:0] [7]
    10/16: $0\g[7:0] [7]
    11/16: $0\p[7:0] [3]
    12/16: $0\g[7:0] [3]
    13/16: $0\p[7:0] [1]
    14/16: $0\g[7:0] [1]
    15/16: $0\g[7:0] [0]
    16/16: $0\p[7:0] [0]

3.18.7.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\_90_lcu\WIDTH=8.\p' from process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$342'.
No latch inferred for signal `$paramod\_90_lcu\WIDTH=8.\g' from process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$342'.

3.18.7.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.18.7.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$342'.
Cleaned up 0 empty switches.

3.18.8. Executing OPT pass (performing simple optimizations).

3.18.8.1. Executing OPT_EXPR pass (perform const folding).

3.18.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\_90_lcu\WIDTH=8'.
Removed a total of 0 cells.

3.18.8.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\_90_lcu\WIDTH=8..
  removing unused `$and' cell `$and$<techmap.v>:222$347'.
  removing unused `$and' cell `$and$<techmap.v>:222$359'.
  removing unused `$and' cell `$and$<techmap.v>:222$365'.
  removing unused `$and' cell `$and$<techmap.v>:230$368'.
  removing unused `$and' cell `$and$<techmap.v>:230$371'.
  removing unused `$and' cell `$and$<techmap.v>:230$374'.
  removing unused `$and' cell `$and$<techmap.v>:230$377'.
  removing unused non-port wire \j.
  removing unused non-port wire \i.
  removed 2 unused temporary wires.

3.18.8.5. Finished fast OPT passes.

3.18.9. Continuing TECHMAP pass.
Mapping ALU.$auto$alumacc.cc:470:replace_alu$38.lcu using $paramod\_90_lcu\WIDTH=8.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.$ternary$<techmap.v>:258$120 ($mux) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.$not$<techmap.v>:258$119 ($not) with simplemap.
Mapping ALU.$auto$alumacc.cc:470:replace_alu$38.B_conv ($pos) with simplemap.
Mapping ALU.$auto$alumacc.cc:470:replace_alu$38.A_conv ($pos) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.$xor$<techmap.v>:262$122 ($xor) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.$xor$<techmap.v>:263$123 ($xor) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.$and$<techmap.v>:260$121 ($and) with simplemap.
Mapping ALU.$auto$alumacc.cc:470:replace_alu$35.lcu using $paramod\_90_lcu\WIDTH=8.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.$ternary$<techmap.v>:258$120 ($mux) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.$not$<techmap.v>:258$119 ($not) with simplemap.
Mapping ALU.$auto$alumacc.cc:470:replace_alu$35.B_conv ($pos) with simplemap.
Mapping ALU.$auto$alumacc.cc:470:replace_alu$35.A_conv ($pos) with simplemap.
Mapping ALU.$techmap$procmux$24.$reduce_or$<techmap.v>:441$208 ($reduce_or) with simplemap.
Mapping ALU.$techmap$procmux$24.$reduce_or$<techmap.v>:441$209 ($reduce_or) with simplemap.
Mapping ALU.$techmap$procmux$24.$reduce_or$<techmap.v>:441$207 ($reduce_or) with simplemap.
Mapping ALU.$techmap$procmux$24.$reduce_or$<techmap.v>:441$206 ($reduce_or) with simplemap.
Mapping ALU.$techmap$procmux$24.$reduce_or$<techmap.v>:441$205 ($reduce_or) with simplemap.
Mapping ALU.$techmap$procmux$24.$reduce_or$<techmap.v>:441$204 ($reduce_or) with simplemap.
Mapping ALU.$techmap$procmux$24.$reduce_or$<techmap.v>:441$203 ($reduce_or) with simplemap.
Mapping ALU.$techmap$procmux$24.$reduce_or$<techmap.v>:441$202 ($reduce_or) with simplemap.
Mapping ALU.$techmap$procmux$24.$and$<techmap.v>:434$201 ($and) with simplemap.
Mapping ALU.$techmap$procmux$24.$and$<techmap.v>:434$200 ($and) with simplemap.
Mapping ALU.$techmap$procmux$24.$and$<techmap.v>:434$199 ($and) with simplemap.
Mapping ALU.$techmap$procmux$24.$and$<techmap.v>:434$198 ($and) with simplemap.
Mapping ALU.$techmap$procmux$24.$and$<techmap.v>:434$197 ($and) with simplemap.
Mapping ALU.$techmap$procmux$24.$and$<techmap.v>:434$196 ($and) with simplemap.
Mapping ALU.$techmap$procmux$24.$and$<techmap.v>:434$195 ($and) with simplemap.
Mapping ALU.$techmap$procmux$24.$and$<techmap.v>:434$194 ($and) with simplemap.
Mapping ALU.$techmap$procmux$24.$and$<techmap.v>:434$193 ($and) with simplemap.
Mapping ALU.$techmap$procmux$24.$ternary$<techmap.v>:445$192 ($mux) with simplemap.
Mapping ALU.$techmap$procmux$24.$reduce_or$<techmap.v>:445$191 ($reduce_or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$or$<techmap.v>:221$352 ($or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$or$<techmap.v>:221$349 ($or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$or$<techmap.v>:221$346 ($or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$or$<techmap.v>:212$344 ($or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$and$<techmap.v>:229$375 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$and$<techmap.v>:229$372 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$and$<techmap.v>:229$369 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$and$<techmap.v>:229$366 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$and$<techmap.v>:222$362 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$and$<techmap.v>:222$356 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$and$<techmap.v>:222$353 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$and$<techmap.v>:222$350 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$and$<techmap.v>:221$363 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$and$<techmap.v>:221$360 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$and$<techmap.v>:221$357 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$and$<techmap.v>:221$354 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$and$<techmap.v>:221$351 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$and$<techmap.v>:221$345 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$and$<techmap.v>:212$343 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$and$<techmap.v>:221$348 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$or$<techmap.v>:221$355 ($or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$or$<techmap.v>:221$358 ($or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$or$<techmap.v>:221$361 ($or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$or$<techmap.v>:221$364 ($or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$or$<techmap.v>:229$367 ($or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$or$<techmap.v>:229$370 ($or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$or$<techmap.v>:229$373 ($or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$or$<techmap.v>:229$376 ($or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$and$<techmap.v>:212$343 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$and$<techmap.v>:221$345 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$and$<techmap.v>:221$348 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$and$<techmap.v>:221$351 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$and$<techmap.v>:221$354 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$and$<techmap.v>:221$357 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$and$<techmap.v>:221$360 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$and$<techmap.v>:221$363 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$and$<techmap.v>:222$350 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$and$<techmap.v>:222$353 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$and$<techmap.v>:222$356 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$and$<techmap.v>:222$362 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$and$<techmap.v>:229$366 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$and$<techmap.v>:229$369 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$and$<techmap.v>:229$372 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$and$<techmap.v>:229$375 ($and) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$or$<techmap.v>:212$344 ($or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$or$<techmap.v>:221$346 ($or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$or$<techmap.v>:221$349 ($or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$or$<techmap.v>:221$352 ($or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$or$<techmap.v>:221$355 ($or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$or$<techmap.v>:221$358 ($or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$or$<techmap.v>:221$361 ($or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$or$<techmap.v>:221$364 ($or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$or$<techmap.v>:229$367 ($or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$or$<techmap.v>:229$370 ($or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$or$<techmap.v>:229$373 ($or) with simplemap.
Mapping ALU.$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$or$<techmap.v>:229$376 ($or) with simplemap.
No more expansions possible.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$378' (??1) in module `\ALU' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$38.$ternary$<techmap.v>:258$120_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$38.$not$<techmap.v>:258$119_Y [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$384' (??1) in module `\ALU' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$38.$ternary$<techmap.v>:258$120_Y [6] = $techmap$auto$alumacc.cc:470:replace_alu$38.$not$<techmap.v>:258$119_Y [6]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$385' (??1) in module `\ALU' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$38.$ternary$<techmap.v>:258$120_Y [7] = $techmap$auto$alumacc.cc:470:replace_alu$38.$not$<techmap.v>:258$119_Y [7]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$382' (??1) in module `\ALU' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$38.$ternary$<techmap.v>:258$120_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$38.$not$<techmap.v>:258$119_Y [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$383' (??1) in module `\ALU' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$38.$ternary$<techmap.v>:258$120_Y [5] = $techmap$auto$alumacc.cc:470:replace_alu$38.$not$<techmap.v>:258$119_Y [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$381' (??1) in module `\ALU' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$38.$ternary$<techmap.v>:258$120_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$38.$not$<techmap.v>:258$119_Y [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$380' (??1) in module `\ALU' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$38.$ternary$<techmap.v>:258$120_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$38.$not$<techmap.v>:258$119_Y [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$379' (??1) in module `\ALU' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$38.$ternary$<techmap.v>:258$120_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$38.$not$<techmap.v>:258$119_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$641' (?1) in module `\ALU' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$38.lcu.$and$<techmap.v>:212$343_Y = $techmap$auto$alumacc.cc:470:replace_alu$38.$xor$<techmap.v>:262$122_Y [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$215' (?0) in module `\ALU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$210 [3] = \opcode [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$594' (const_and) in module `\ALU' with constant driver `$techmap$procmux$24.$and$<techmap.v>:434$194_Y [7] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$178' (?0) in module `\ALU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$176 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$179' (?0) in module `\ALU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$176 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$180' (?0) in module `\ALU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$176 [2] = \opcode [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$602' (const_and) in module `\ALU' with constant driver `$techmap$procmux$24.$and$<techmap.v>:434$193_Y [7] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$448' (00) in module `\ALU' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$447 [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$243' (?0) in module `\ALU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$240 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$245' (?0) in module `\ALU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$240 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$227' (?0) in module `\ALU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$225 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$230' (?0) in module `\ALU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$225 [3] = \opcode [3]'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$453' (0?) in module `\ALU' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$452 [0] = $auto$simplemap.cc:127:simplemap_reduce$447 [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$274' (?0) in module `\ALU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$270 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$275' (?0) in module `\ALU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$270 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$257' (?0) in module `\ALU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$255 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$258' (?0) in module `\ALU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$255 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$260' (?0) in module `\ALU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$255 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$146' (?0) in module `\ALU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$143 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$147' (?0) in module `\ALU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$143 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$148' (?0) in module `\ALU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$143 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$287' (?0) in module `\ALU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$285 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$289' (?0) in module `\ALU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$285 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$290' (?0) in module `\ALU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$285 [3] = \opcode [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$426' (??0) in module `\ALU' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$35.$ternary$<techmap.v>:258$120_Y [7] = \B [7]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$425' (??0) in module `\ALU' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$35.$ternary$<techmap.v>:258$120_Y [6] = \B [6]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$423' (??0) in module `\ALU' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$35.$ternary$<techmap.v>:258$120_Y [4] = \B [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$424' (??0) in module `\ALU' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$35.$ternary$<techmap.v>:258$120_Y [5] = \B [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$421' (??0) in module `\ALU' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$35.$ternary$<techmap.v>:258$120_Y [2] = \B [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$422' (??0) in module `\ALU' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$35.$ternary$<techmap.v>:258$120_Y [3] = \B [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$420' (??0) in module `\ALU' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$35.$ternary$<techmap.v>:258$120_Y [1] = \B [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$419' (??0) in module `\ALU' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$35.$ternary$<techmap.v>:258$120_Y [0] = \B [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$651' (const_and) in module `\ALU' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$35.lcu.$and$<techmap.v>:212$343_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$667' (?0) in module `\ALU' with constant driver `$auto$alumacc.cc:484:replace_alu$37 [0] = $techmap$auto$alumacc.cc:470:replace_alu$35.$and$<techmap.v>:260$121_Y [0]'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$164' in module `ALU'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$579' (const_and) in module `\ALU' with constant driver `$techmap$procmux$24.$and$<techmap.v>:434$195_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$521' (0?) in module `\ALU' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$519 [1] = $techmap$procmux$24.$and$<techmap.v>:434$196_Y [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$402' (?0) in module `\ALU' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$35.$xor$<techmap.v>:263$123_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$35.$xor$<techmap.v>:262$122_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$596' (const_and) in module `\ALU' with constant driver `$techmap$procmux$24.$and$<techmap.v>:434$193_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$508' (0?) in module `\ALU' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$507 [0] = $techmap$procmux$24.$and$<techmap.v>:434$194_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$597' (const_and) in module `\ALU' with constant driver `$techmap$procmux$24.$and$<techmap.v>:434$193_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$496' (0?) in module `\ALU' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$495 [0] = $techmap$procmux$24.$and$<techmap.v>:434$194_Y [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$598' (const_and) in module `\ALU' with constant driver `$techmap$procmux$24.$and$<techmap.v>:434$193_Y [3] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$484' (0?) in module `\ALU' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$483 [0] = $techmap$procmux$24.$and$<techmap.v>:434$194_Y [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$599' (const_and) in module `\ALU' with constant driver `$techmap$procmux$24.$and$<techmap.v>:434$193_Y [4] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$472' (0?) in module `\ALU' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$471 [0] = $techmap$procmux$24.$and$<techmap.v>:434$194_Y [4]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$600' (const_and) in module `\ALU' with constant driver `$techmap$procmux$24.$and$<techmap.v>:434$193_Y [5] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$460' (0?) in module `\ALU' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$459 [0] = $techmap$procmux$24.$and$<techmap.v>:434$194_Y [5]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$601' (const_and) in module `\ALU' with constant driver `$techmap$procmux$24.$and$<techmap.v>:434$193_Y [6] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$436' (0?) in module `\ALU' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$435 [0] = $techmap$procmux$24.$and$<techmap.v>:434$194_Y [6]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$316' (0?) in module `\ALU' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$38.$xor$<techmap.v>:263$123_Y [8] = $auto$alumacc.cc:484:replace_alu$40 [7]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$410' (0?) in module `\ALU' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$35.$xor$<techmap.v>:263$123_Y [8] = $auto$alumacc.cc:484:replace_alu$37 [7]'.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
  Cell `$auto$simplemap.cc:37:simplemap_not$390' is identical to cell `$auto$simplemap.cc:37:simplemap_not$431'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$38.$not$<techmap.v>:258$119_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$35.$not$<techmap.v>:258$119_Y [4]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$390' from module `\ALU'.
  Cell `$auto$simplemap.cc:37:simplemap_not$389' is identical to cell `$auto$simplemap.cc:37:simplemap_not$430'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$38.$not$<techmap.v>:258$119_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$35.$not$<techmap.v>:258$119_Y [3]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$389' from module `\ALU'.
  Cell `$auto$simplemap.cc:37:simplemap_not$388' is identical to cell `$auto$simplemap.cc:37:simplemap_not$429'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$38.$not$<techmap.v>:258$119_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$35.$not$<techmap.v>:258$119_Y [2]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$388' from module `\ALU'.
  Cell `$auto$simplemap.cc:37:simplemap_not$387' is identical to cell `$auto$simplemap.cc:37:simplemap_not$428'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$38.$not$<techmap.v>:258$119_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$35.$not$<techmap.v>:258$119_Y [1]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$387' from module `\ALU'.
  Cell `$auto$simplemap.cc:37:simplemap_not$386' is identical to cell `$auto$simplemap.cc:37:simplemap_not$427'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$38.$not$<techmap.v>:258$119_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$35.$not$<techmap.v>:258$119_Y [0]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$386' from module `\ALU'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$280' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$295'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$278 [1] = $auto$simplemap.cc:127:simplemap_reduce$293 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$280' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$273' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$288'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$270 [1] = $auto$simplemap.cc:250:simplemap_eqne$285 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$273' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$244' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$259'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$240 [2] = $auto$simplemap.cc:250:simplemap_eqne$255 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$244' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$242' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$272'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$240 [0] = $auto$simplemap.cc:250:simplemap_eqne$270 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$242' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$229' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$259'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$225 [2] = $auto$simplemap.cc:250:simplemap_eqne$255 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$229' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$228' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$288'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$225 [1] = $auto$simplemap.cc:250:simplemap_eqne$285 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$228' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$214' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$259'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$210 [2] = $auto$simplemap.cc:250:simplemap_eqne$255 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$214' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$213' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$288'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$210 [1] = $auto$simplemap.cc:250:simplemap_eqne$285 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$213' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$212' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$272'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$210 [0] = $auto$simplemap.cc:250:simplemap_eqne$270 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$212' from module `\ALU'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$185' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$264'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$184 [0] = $auto$simplemap.cc:127:simplemap_reduce$263 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$185' from module `\ALU'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$153' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$295'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$151 [1] = $auto$simplemap.cc:127:simplemap_reduce$293 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$153' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$145' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$272'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$143 [0] = $auto$simplemap.cc:250:simplemap_eqne$270 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$145' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$133' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$401'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$131 = $techmap$auto$alumacc.cc:470:replace_alu$35.$xor$<techmap.v>:262$122_Y [7]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$133' from module `\ALU'.
  Cell `$auto$simplemap.cc:177:logic_reduce$127' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$295'.
    Redirecting output \Y: $auto$simplemap.cc:168:logic_reduce$125 [1] = $auto$simplemap.cc:127:simplemap_reduce$293 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:177:logic_reduce$127' from module `\ALU'.
  Cell `$auto$simplemap.cc:177:logic_reduce$126' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$264'.
    Redirecting output \Y: $auto$simplemap.cc:168:logic_reduce$125 [0] = $auto$simplemap.cc:127:simplemap_reduce$263 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:177:logic_reduce$126' from module `\ALU'.
  Cell `$auto$simplemap.cc:37:simplemap_not$392' is identical to cell `$auto$simplemap.cc:37:simplemap_not$433'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$38.$not$<techmap.v>:258$119_Y [6] = $techmap$auto$alumacc.cc:470:replace_alu$35.$not$<techmap.v>:258$119_Y [6]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$392' from module `\ALU'.
  Cell `$auto$simplemap.cc:37:simplemap_not$393' is identical to cell `$auto$simplemap.cc:37:simplemap_not$434'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$38.$not$<techmap.v>:258$119_Y [7] = $techmap$auto$alumacc.cc:470:replace_alu$35.$not$<techmap.v>:258$119_Y [7]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$393' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$109' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$400'.
    Redirecting output \Y: $xor$/home/harshgk/vsdflow/source/alu_design.v:16$6_Y [6] = $techmap$auto$alumacc.cc:470:replace_alu$35.$xor$<techmap.v>:262$122_Y [6]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$109' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$108' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$399'.
    Redirecting output \Y: $xor$/home/harshgk/vsdflow/source/alu_design.v:16$6_Y [5] = $techmap$auto$alumacc.cc:470:replace_alu$35.$xor$<techmap.v>:262$122_Y [5]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$108' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$107' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$398'.
    Redirecting output \Y: $xor$/home/harshgk/vsdflow/source/alu_design.v:16$6_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$35.$xor$<techmap.v>:262$122_Y [4]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$107' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$106' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$397'.
    Redirecting output \Y: $xor$/home/harshgk/vsdflow/source/alu_design.v:16$6_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$35.$xor$<techmap.v>:262$122_Y [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$106' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$105' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$396'.
    Redirecting output \Y: $xor$/home/harshgk/vsdflow/source/alu_design.v:16$6_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$35.$xor$<techmap.v>:262$122_Y [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$105' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$104' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$395'.
    Redirecting output \Y: $xor$/home/harshgk/vsdflow/source/alu_design.v:16$6_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$35.$xor$<techmap.v>:262$122_Y [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$104' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$103' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$394'.
    Redirecting output \Y: $xor$/home/harshgk/vsdflow/source/alu_design.v:16$6_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$35.$xor$<techmap.v>:262$122_Y [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$103' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$93' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$417'.
    Redirecting output \Y: $and$/home/harshgk/vsdflow/source/alu_design.v:14$4_Y [6] = $techmap$auto$alumacc.cc:470:replace_alu$35.$and$<techmap.v>:260$121_Y [6]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$93' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$92' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$416'.
    Redirecting output \Y: $and$/home/harshgk/vsdflow/source/alu_design.v:14$4_Y [5] = $techmap$auto$alumacc.cc:470:replace_alu$35.$and$<techmap.v>:260$121_Y [5]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$92' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$91' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$415'.
    Redirecting output \Y: $and$/home/harshgk/vsdflow/source/alu_design.v:14$4_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$35.$and$<techmap.v>:260$121_Y [4]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$91' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$90' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$414'.
    Redirecting output \Y: $and$/home/harshgk/vsdflow/source/alu_design.v:14$4_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$35.$and$<techmap.v>:260$121_Y [3]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$90' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$89' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$413'.
    Redirecting output \Y: $and$/home/harshgk/vsdflow/source/alu_design.v:14$4_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$35.$and$<techmap.v>:260$121_Y [2]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$89' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$88' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$412'.
    Redirecting output \Y: $and$/home/harshgk/vsdflow/source/alu_design.v:14$4_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$35.$and$<techmap.v>:260$121_Y [1]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$88' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$87' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$411'.
    Redirecting output \Y: $and$/home/harshgk/vsdflow/source/alu_design.v:14$4_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$35.$and$<techmap.v>:260$121_Y [0]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$87' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$94' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$418'.
    Redirecting output \Y: $and$/home/harshgk/vsdflow/source/alu_design.v:14$4_Y [7] = $techmap$auto$alumacc.cc:470:replace_alu$35.$and$<techmap.v>:260$121_Y [7]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$94' from module `\ALU'.
  Cell `$auto$simplemap.cc:37:simplemap_not$391' is identical to cell `$auto$simplemap.cc:37:simplemap_not$432'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$38.$not$<techmap.v>:258$119_Y [5] = $techmap$auto$alumacc.cc:470:replace_alu$35.$not$<techmap.v>:258$119_Y [5]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$391' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$160' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$401'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$158 = $techmap$auto$alumacc.cc:470:replace_alu$35.$xor$<techmap.v>:262$122_Y [7]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$160' from module `\ALU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$110' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$401'.
    Redirecting output \Y: $xor$/home/harshgk/vsdflow/source/alu_design.v:16$6_Y [7] = $techmap$auto$alumacc.cc:470:replace_alu$35.$xor$<techmap.v>:262$122_Y [7]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$110' from module `\ALU'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$250' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$265'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$248 [1] = $auto$simplemap.cc:127:simplemap_reduce$263 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$250' from module `\ALU'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$235' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$265'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$233 [1] = $auto$simplemap.cc:127:simplemap_reduce$263 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$235' from module `\ALU'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$234' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$294'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$233 [0] = $auto$simplemap.cc:127:simplemap_reduce$293 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$234' from module `\ALU'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$220' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$265'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$218 [1] = $auto$simplemap.cc:127:simplemap_reduce$263 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$220' from module `\ALU'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$219' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$279'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$218 [0] = $auto$simplemap.cc:127:simplemap_reduce$278 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$219' from module `\ALU'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$152' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$249'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$151 [0] = $auto$simplemap.cc:127:simplemap_reduce$248 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$152' from module `\ALU'.
Removed a total of 46 cells.

3.19.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$655'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$657'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$658'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$661'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$662'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$671'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$673'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$674'.

3.19.5. Finished fast OPT passes.

3.20. Executing ABC pass (technology mapping using ABC).

3.20.1. Extracting gate netlist of module `\ALU' to `<abc-temp-dir>/input.blif'..
Extracted 294 gates and 316 wires to a netlist network with 20 inputs and 10 outputs.

3.20.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       24
ABC RESULTS:              AOI3 cells:       21
ABC RESULTS:              NAND cells:       12
ABC RESULTS:               NOR cells:       25
ABC RESULTS:               NOT cells:       32
ABC RESULTS:              OAI3 cells:       15
ABC RESULTS:              OAI4 cells:       22
ABC RESULTS:                OR cells:       41
ABC RESULTS:              XNOR cells:       15
ABC RESULTS:               XOR cells:        8
ABC RESULTS:        internal signals:      286
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:       10
Removing temp directory.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Removed a total of 0 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..

3.21.5. Finished fast OPT passes.

3.22. Executing HIERARCHY pass (managing design hierarchy).

3.22.1. Analyzing design hierarchy..
Top module:  \ALU

3.22.2. Analyzing design hierarchy..
Top module:  \ALU
Removed 0 unused modules.

3.23. Printing statistics.

=== ALU ===

   Number of wires:                212
   Number of wire bits:            236
   Number of public wires:           7
   Number of public wire bits:      31
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                215
     $_AND_                         24
     $_AOI3_                        21
     $_NAND_                        12
     $_NOR_                         25
     $_NOT_                         32
     $_OAI3_                        15
     $_OAI4_                        22
     $_OR_                          41
     $_XNOR_                        15
     $_XOR_                          8

3.24. Executing CHECK pass (checking for obvious problems).
checking module ALU..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\ALU':

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..

5.8. Executing OPT_EXPR pass (perform const folding).

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\ALU' to `<abc-temp-dir>/input.blif'..
Extracted 215 gates and 235 wires to a netlist network with 20 inputs and 10 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        6
ABC RESULTS:           AOI21X1 cells:       22
ABC RESULTS:           AOI22X1 cells:       12
ABC RESULTS:             INVX1 cells:       40
ABC RESULTS:           NAND2X1 cells:       34
ABC RESULTS:           NAND3X1 cells:       18
ABC RESULTS:            NOR2X1 cells:       44
ABC RESULTS:            NOR3X1 cells:        8
ABC RESULTS:           OAI21X1 cells:       52
ABC RESULTS:           OAI22X1 cells:        4
ABC RESULTS:             OR2X2 cells:        5
ABC RESULTS:            XOR2X1 cells:        4
ABC RESULTS:        internal signals:      205
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:       10
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
No more expansions possible.
Removed 0 unused cells and 235 unused wires.

8. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port ALU.A: Missing option -inpad.
Don't map input port ALU.B: Missing option -inpad.
Mapping port ALU.negative using BUFX2.
Don't map input port ALU.opcode: Missing option -inpad.
Mapping port ALU.overflow using BUFX2.
Mapping port ALU.result using BUFX2.
Mapping port ALU.zero using BUFX2.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..

9.8. Executing OPT_EXPR pass (perform const folding).

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing BLIF backend.

11. Printing statistics.

=== ALU ===

   Number of wires:                250
   Number of wire bits:            281
   Number of public wires:         250
   Number of public wire bits:     281
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                260
     AND2X2                          6
     AOI21X1                        22
     AOI22X1                        12
     BUFX2                          11
     INVX1                          40
     NAND2X1                        34
     NAND3X1                        18
     NOR2X1                         44
     NOR3X1                          8
     OAI21X1                        52
     OAI22X1                         4
     OR2X2                           5
     XOR2X1                          4

End of script. Logfile hash: 1f6c503f14
CPU: user 0.47s system 0.07s, MEM: 37.28 MB total, 10.25 MB resident
Yosys 0.7 (git sha1 61f6811, gcc 5.4.0-6ubuntu1~16.04.4 -O2 -fstack-protector-strong -fPIC -Os)
Time spent: 12% 17x opt_expr (0 sec), 12% 16x opt_clean (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef
Cleaning up output syntax
ypostproc.tcl ALU_mapped.blif ALU /usr/local/share/qflow/tech/osu018/osu018.sh vdd gnd 
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 100 -c 20 -I ALU_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif ALU.blif

blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 8 (load 178.294) from node _2_,
driven by NOR2X1 with strength 58.1923 (fF driven at latency 100)
Top fanout load-to-strength ratio is 3.04873 (latency = 304.873 ps)
Top input node fanout is 9 (load 147.376) from node A[2].
Warning 1: load of 82.6844 is 1.41585 times greater than strongest gate NAND2X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 157.88 is 2.69965 times greater than strongest gate XOR2X1
Warning 15: load of 162.874 is 2.78505 times greater than strongest gate XOR2X1
Warning 31: load of 188.294 is 3.21973 times greater than strongest gate XOR2X1
46 gates exceed specified minimum load.
0 buffers were added.
20 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 238    	Out: 218    	-20
	"2" gates	In: 22    	Out: 41    	+19

Number of gates changed: 20
gates resized: 20
blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 8 (load 187.626) from node _2_,
driven by NOR2X1 with strength 58.1923 (fF driven at latency 100)
Top fanout load-to-strength ratio is 3.20831 (latency = 320.831 ps)
Top input node fanout is 9 (load 156.708) from node A[2].
Warning 1: load of 82.6844 is 1.41585 times greater than strongest gate NAND2X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 157.88 is 2.69965 times greater than strongest gate XOR2X1
Warning 15: load of 172.206 is 2.94463 times greater than strongest gate XOR2X1
Warning 32: load of 197.626 is 3.3793 times greater than strongest gate XOR2X1
47 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 218    	Out: 218    	+0
	"2" gates	In: 41    	Out: 41    	+0
	"4" gates	In: 1    	Out: 1    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/harshgk/vsdflow/synthesis
Files:
   Verilog: /home/harshgk/vsdflow/synthesis/ALU.rtl.v
   Verilog: /home/harshgk/vsdflow/synthesis/ALU.rtlnopwr.v
   Verilog: /home/harshgk/vsdflow/synthesis/ALU.rtlbb.v
   Spice:   /home/harshgk/vsdflow/synthesis/ALU.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" -io_time=1n -time=100p -idelay=10p -odelay=100p -cload=500f ALU.spc ALU.xspice

Synthesis script ended on Thu Apr 17 02:43:31 PDT 2025
